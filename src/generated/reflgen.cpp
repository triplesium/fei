#include "reflgen.hpp"
// Generated by reflgen

#include "refl/registry.hpp"
#include "graphics/plugin.hpp"
#include "graphics/texture2d.hpp"
#include "refl/constructor.hpp"
#include "ecs/world.hpp"
#include "window/input.hpp"
#include "graphics/render_pipeline.hpp"
#include "graphics/opengl/render_pipeline.hpp"
#include "refl/val.hpp"
#include "math/color.hpp"
#include "base/log.hpp"
#include "graphics/opengl/buffer.hpp"
#include "refl/cls.hpp"
#include "refl/registry.hpp"
#include "ecs/system.hpp"
#include "graphics/buffer.hpp"
#include "graphics/opengl/texture2d.hpp"
#include "refl/ref.hpp"
#include "ecs/event.hpp"
#include "refl/qual_type.hpp"
#include "render2d/material2d.hpp"
#include "render2d/render.hpp"
#include "ecs/query.hpp"
#include "ecs/resource.hpp"
#include "refl/type.hpp"
#include "render2d/sprite.hpp"
#include "graphics/opengl/plugin.hpp"
#include "math/primitives.hpp"
#include "refl/method.hpp"
#include "scripting/scripting_engine.hpp"
#include "ecs/archetype.hpp"
#include "ecs/entity.hpp"
#include "math/vector.hpp"
#include "render2d/debug.hpp"
#include "ecs/commands.hpp"
#include "ecs/scheduler.hpp"
#include "graphics/opengl/draw_list.hpp"
#include "refl/callable.hpp"
#include "core/transform.hpp"
#include "graphics/draw_list.hpp"
#include "graphics/device.hpp"
#include "math/matrix.hpp"
#include "graphics/opengl/program.hpp"
#include "base/optional.hpp"
#include "app/plugin.hpp"
#include "refl/property.hpp"
#include "app/app.hpp"
#include "graphics/framebuffer.hpp"
#include "graphics/opengl/framebuffer.hpp"
#include "core/time.hpp"
#include "render2d/camera.hpp"
#include "graphics/opengl/device.hpp"
#include "graphics/opengl/shader.hpp"
#include "graphics/shader.hpp"
#include "window/window.hpp"
#include "app/asset.hpp"
#include "graphics/program.hpp"
#include "ecs/column.hpp"

namespace fei {
void register_classes() {
auto& registry = Registry::instance();
registry.register_cls<fei::AppStates>()
	.add_property("should_stop", &fei::AppStates::should_stop);
registry.register_cls<fei::App>()
	.add_method("run_schedule", static_cast<void(fei::App::*)(uint32_t)>(&fei::App::run_schedule))
	.add_method("run", static_cast<void(fei::App::*)()>(&fei::App::run))
	.add_constructor<fei::App>();
registry.register_cls<fei::AssetLoaderBase>()
	.add_method("load", static_cast<void*(fei::AssetLoaderBase::*)(const std::filesystem::path&)>(&fei::AssetLoaderBase::load))
	.add_method("unload", static_cast<void(fei::AssetLoaderBase::*)(void*)>(&fei::AssetLoaderBase::unload));
registry.register_cls<fei::AssetEntry>()
	.add_property("path", &fei::AssetEntry::path)
	.add_property("type_id", &fei::AssetEntry::type_id)
	.add_property("asset", &fei::AssetEntry::asset)
	.add_property("is_loaded", &fei::AssetEntry::is_loaded);
registry.register_cls<fei::Assets>()
	.add_method("get_entry", static_cast<fei::Optional<AssetEntry &>(fei::Assets::*)(HandleId)>(&fei::Assets::get_entry))
	.add_method("load", static_cast<HandleId(fei::Assets::*)(const std::filesystem::path&)>(&fei::Assets::load))
	.add_method("unload", static_cast<void(fei::Assets::*)(HandleId)>(&fei::Assets::unload))
	.add_constructor<fei::Assets, fei::TypeId, std::unique_ptr<AssetLoaderBase>>()
	.add_constructor<fei::Assets, fei::Assets&&>();
registry.register_cls<fei::AssetServer>()
	.add_method("set_assets_dir", static_cast<void(fei::AssetServer::*)(const std::filesystem::path&)>(&fei::AssetServer::set_assets_dir))
	.add_method("assets_dir", static_cast<const std::filesystem::path&(fei::AssetServer::*)() const>(&fei::AssetServer::assets_dir))
	.add_constructor<fei::AssetServer>()
	.add_constructor<fei::AssetServer, fei::AssetServer&&>();
registry.register_cls<fei::AssetPlugin>()
	.add_method("setup", static_cast<void(fei::AssetPlugin::*)(fei::App&)>(&fei::AssetPlugin::setup));
registry.register_cls<fei::Plugin>()
	.add_method("setup", static_cast<void(fei::Plugin::*)(fei::App&)>(&fei::Plugin::setup));
registry.register_cls<fei::FormatString>()
	.add_property("str", &fei::FormatString::str)
	.add_property("loc", &fei::FormatString::loc)
	.add_constructor<fei::FormatString, const char*, const std::source_location&>();
registry.register_cls<fei::InPlace>();
registry.register_cls<fei::InPlace>();
registry.register_cls<fei::TrivialInit>();
registry.register_cls<fei::TrivialInit>();
registry.register_cls<fei::NullOpt>();
registry.register_cls<fei::NullOpt>();
registry.register_cls<fei::Time>()
	.add_property("time_scale", &fei::Time::time_scale)
	.add_method("tick", static_cast<void(fei::Time::*)()>(&fei::Time::tick))
	.add_method("delta", static_cast<float(fei::Time::*)() const>(&fei::Time::delta));
registry.register_cls<fei::Timer>()
	.add_property("duration", &fei::Timer::duration)
	.add_property("mode", &fei::Timer::mode)
	.add_method("tick", static_cast<void(fei::Timer::*)(float)>(&fei::Timer::tick))
	.add_method("just_finished", static_cast<bool(fei::Timer::*)() const>(&fei::Timer::just_finished))
	.add_constructor<fei::Timer, float, fei::TimerMode>();
registry.register_cls<fei::TimePlugin>()
	.add_method("setup", static_cast<void(fei::TimePlugin::*)(fei::App&)>(&fei::TimePlugin::setup));
registry.register_cls<fei::Transform2D>()
	.add_property("position", &fei::Transform2D::position)
	.add_property("scale", &fei::Transform2D::scale)
	.add_property("rotation", &fei::Transform2D::rotation)
	.add_method("model_matrix", static_cast<fei::Matrix4x4(fei::Transform2D::*)() const>(&fei::Transform2D::model_matrix));
registry.register_cls<fei::Edges>()
	.add_property("remove", &fei::Edges::remove)
	.add_property("add", &fei::Edges::add);
registry.register_cls<fei::Archetype>()
	.add_method("id", static_cast<ArchetypeId(fei::Archetype::*)() const>(&fei::Archetype::id))
	.add_method("size", static_cast<std::size_t(fei::Archetype::*)() const>(&fei::Archetype::size))
	.add_method("alloc", static_cast<std::size_t(fei::Archetype::*)(Entity)>(&fei::Archetype::alloc))
	.add_method("remove_row", static_cast<void(fei::Archetype::*)(std::size_t)>(&fei::Archetype::remove_row))
	.add_method("remove_entity", static_cast<void(fei::Archetype::*)(Entity)>(&fei::Archetype::remove_entity))
	.add_method("get_component", static_cast<fei::Ref(fei::Archetype::*)(fei::TypeId, std::size_t) const>(&fei::Archetype::get_component))
	.add_method("set_component", static_cast<void(fei::Archetype::*)(fei::TypeId, std::size_t, fei::Ref)>(&fei::Archetype::set_component))
	.add_method("has_component", static_cast<bool(fei::Archetype::*)(fei::TypeId) const>(&fei::Archetype::has_component))
	.add_method("hash", static_cast<std::size_t(fei::Archetype::*)() const>(&fei::Archetype::hash))
	.add_method("entities", static_cast<const std::vector<unsigned int>&(fei::Archetype::*)() const>(&fei::Archetype::entities))
	.add_method("components", static_cast<const std::vector<fei::TypeId>&(fei::Archetype::*)() const>(&fei::Archetype::components))
	.add_method("column", static_cast<fei::Column&(fei::Archetype::*)(fei::TypeId)>(&fei::Archetype::column))
	.add_method("edges", static_cast<fei::Edges&(fei::Archetype::*)()>(&fei::Archetype::edges))
	.add_constructor<fei::Archetype, ArchetypeId, std::vector<TypeId>>();
registry.register_cls<fei::Archetypes>()
	.add_method("get_id_or_insert", static_cast<ArchetypeId(fei::Archetypes::*)(std::vector<TypeId>)>(&fei::Archetypes::get_id_or_insert))
	.add_method("get", static_cast<fei::Archetype&(fei::Archetypes::*)(ArchetypeId)>(&fei::Archetypes::get))
	.add_method("get", static_cast<const fei::Archetype&(fei::Archetypes::*)(ArchetypeId) const>(&fei::Archetypes::get))
	.add_method("begin", static_cast<std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const unsigned int, fei::Archetype>>>>(fei::Archetypes::*)() const>(&fei::Archetypes::begin))
	.add_method("end", static_cast<std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const unsigned int, fei::Archetype>>>>(fei::Archetypes::*)() const>(&fei::Archetypes::end));
registry.register_cls<fei::Column>()
	.add_method("set", static_cast<void(fei::Column::*)(uint32_t, fei::Ref)>(&fei::Column::set))
	.add_method("push_back", static_cast<void(fei::Column::*)(fei::Ref)>(&fei::Column::push_back))
	.add_method("get", static_cast<fei::Ref(fei::Column::*)(uint32_t) const>(&fei::Column::get))
	.add_method("swap_remove", static_cast<void(fei::Column::*)(uint32_t)>(&fei::Column::swap_remove))
	.add_constructor<fei::Column, fei::TypeId>()
	.add_constructor<fei::Column, const fei::Column&>()
	.add_constructor<fei::Column, fei::Column&&>();
registry.register_cls<fei::CommandsQueue>()
	.add_property("commands", &fei::CommandsQueue::commands)
	.add_method("add_command", static_cast<void(fei::CommandsQueue::*)(std::function<void (World &)>)>(&fei::CommandsQueue::add_command))
	.add_method("execute", static_cast<void(fei::CommandsQueue::*)(fei::World&)>(&fei::CommandsQueue::execute))
	.add_method("clear", static_cast<void(fei::CommandsQueue::*)()>(&fei::CommandsQueue::clear));
registry.register_cls<fei::EntityCommands>()
	.add_method("id", static_cast<Entity(fei::EntityCommands::*)() const>(&fei::EntityCommands::id))
	.add_constructor<fei::EntityCommands, fei::World&, Entity>();
registry.register_cls<fei::Commands>()
	.add_method("prepare", static_cast<void(fei::Commands::*)(fei::World&)>(&fei::Commands::prepare))
	.add_method("add_command", static_cast<void(fei::Commands::*)(std::function<void (World &)>)>(&fei::Commands::add_command))
	.add_method("entity", static_cast<fei::EntityCommands(fei::Commands::*)(Entity)>(&fei::Commands::entity))
	.add_method("spawn", static_cast<fei::EntityCommands(fei::Commands::*)()>(&fei::Commands::spawn))
	.add_method("world", static_cast<fei::World&(fei::Commands::*)()>(&fei::Commands::world));
registry.register_cls<fei::EntityLocation>()
	.add_property("archetype_id", &fei::EntityLocation::archetype_id)
	.add_property("row", &fei::EntityLocation::row);
registry.register_cls<fei::Entities>()
	.add_method("alloc", static_cast<Entity(fei::Entities::*)()>(&fei::Entities::alloc))
	.add_method("set_location", static_cast<void(fei::Entities::*)(Entity, fei::EntityLocation)>(&fei::Entities::set_location))
	.add_method("get_location", static_cast<fei::EntityLocation(fei::Entities::*)(Entity) const>(&fei::Entities::get_location))
	.add_method("contains", static_cast<bool(fei::Entities::*)(Entity) const>(&fei::Entities::contains))
	.add_method("remove_entity", static_cast<void(fei::Entities::*)(Entity)>(&fei::Entities::remove_entity))
	.add_constructor<fei::Entities>();
registry.register_cls<fei::EventId>()
	.add_property("id", &fei::EventId::id)
	.add_property("events", &fei::EventId::events);
registry.register_cls<fei::EventInstance>()
	.add_property("id", &fei::EventInstance::id)
	.add_property("event", &fei::EventInstance::event);
registry.register_cls<fei::EventSequence>()
	.add_property("events", &fei::EventSequence::events)
	.add_property("start_event_count", &fei::EventSequence::start_event_count);
registry.register_cls<fei::Events>()
	.add_method("send", static_cast<fei::EventId(fei::Events::*)(fei::Val)>(&fei::Events::send))
	.add_method("update", static_cast<void(fei::Events::*)()>(&fei::Events::update))
	.add_method("reset_start_event_count", static_cast<void(fei::Events::*)()>(&fei::Events::reset_start_event_count))
	.add_method("clear", static_cast<void(fei::Events::*)()>(&fei::Events::clear))
	.add_method("size", static_cast<size_t(fei::Events::*)() const>(&fei::Events::size))
	.add_method("oldest_event_count", static_cast<size_t(fei::Events::*)() const>(&fei::Events::oldest_event_count))
	.add_method("oldest_id", static_cast<size_t(fei::Events::*)() const>(&fei::Events::oldest_id))
	.add_method("sequence", static_cast<const fei::EventSequence&(fei::Events::*)(size_t) const>(&fei::Events::sequence))
	.add_method("get_event", static_cast<std::optional<EventInstance>(fei::Events::*)(size_t) const>(&fei::Events::get_event))
	.add_constructor<fei::Events, fei::TypeId>();
registry.register_cls<fei::EventsMap>()
	.add_property("events", &fei::EventsMap::events)
	.add_method("clear", static_cast<void(fei::EventsMap::*)()>(&fei::EventsMap::clear));
registry.register_cls<fei::QueryParam<Entity>>()
	.add_method("match", static_cast<bool(*)(const fei::Archetype&)>(&fei::QueryParam<Entity>::match))
	.add_method("get", static_cast<Entity(*)(const fei::Archetype&, std::size_t)>(&fei::QueryParam<Entity>::get));
registry.register_cls<fei::Resources>()
	.add_method("get", static_cast<fei::Ref(fei::Resources::*)(fei::TypeId) const>(&fei::Resources::get))
	.add_constructor<fei::Resources>();
registry.register_cls<fei::SystemScheduler>()
	.add_method("run_systems", static_cast<void(fei::SystemScheduler::*)(ScheduleId, fei::World&)>(&fei::SystemScheduler::run_systems))
	.add_constructor<fei::SystemScheduler>()
	.add_constructor<fei::SystemScheduler, fei::SystemScheduler&&>();
registry.register_cls<fei::SystemParam>()
	.add_method("prepare", static_cast<void(fei::SystemParam::*)(fei::World&)>(&fei::SystemParam::prepare));
registry.register_cls<fei::System>()
	.add_method("run", static_cast<void(fei::System::*)(fei::World&)>(&fei::System::run));
registry.register_cls<fei::World>()
	.add_method("entity", static_cast<Entity(fei::World::*)()>(&fei::World::entity))
	.add_method("add_component", static_cast<void(fei::World::*)(Entity, fei::Ref)>(&fei::World::add_component))
	.add_method("remove_component", static_cast<void(fei::World::*)(Entity, fei::TypeId)>(&fei::World::remove_component))
	.add_method("has_component", static_cast<bool(fei::World::*)(Entity, fei::TypeId) const>(&fei::World::has_component))
	.add_method("get_component", static_cast<fei::Ref(fei::World::*)(Entity, fei::TypeId) const>(&fei::World::get_component))
	.add_method("has_entity", static_cast<bool(fei::World::*)(Entity) const>(&fei::World::has_entity))
	.add_method("despawn", static_cast<void(fei::World::*)(Entity)>(&fei::World::despawn))
	.add_method("run_schedule", static_cast<void(fei::World::*)(ScheduleId)>(&fei::World::run_schedule))
	.add_method("archetypes", static_cast<const fei::Archetypes&(fei::World::*)() const>(&fei::World::archetypes))
	.add_constructor<fei::World>();
registry.register_cls<fei::Tex2F>()
	.add_property("u", &fei::Tex2F::u)
	.add_property("v", &fei::Tex2F::v)
	.add_constructor<fei::Tex2F>()
	.add_constructor<fei::Tex2F, float, float>();
registry.register_cls<fei::V2F_C4F>()
	.add_property("vertices", &fei::V2F_C4F::vertices)
	.add_property("color", &fei::V2F_C4F::color);
registry.register_cls<fei::V2F_C4F_T2F>()
	.add_property("vertices", &fei::V2F_C4F_T2F::vertices)
	.add_property("color", &fei::V2F_C4F_T2F::color)
	.add_property("tex_coords", &fei::V2F_C4F_T2F::tex_coords);
registry.register_cls<fei::V2F_C4F_T2F_Quad>()
	.add_property("bl", &fei::V2F_C4F_T2F_Quad::bl)
	.add_property("br", &fei::V2F_C4F_T2F_Quad::br)
	.add_property("tl", &fei::V2F_C4F_T2F_Quad::tl)
	.add_property("tr", &fei::V2F_C4F_T2F_Quad::tr);
registry.register_cls<fei::Buffer>()
	.add_method("update_data", static_cast<void(fei::Buffer::*)(const std::byte*, size_t)>(&fei::Buffer::update_data));
registry.register_cls<fei::RenderDevice>()
	.add_method("set_instance", static_cast<void(*)(fei::RenderDevice*)>(&fei::RenderDevice::set_instance))
	.add_method("instance", static_cast<fei::RenderDevice*(*)()>(&fei::RenderDevice::instance))
	.add_method("create_shader", static_cast<fei::Shader*(fei::RenderDevice::*)(fei::ShaderStage, const std::basic_string<char>&)>(&fei::RenderDevice::create_shader))
	.add_method("shader_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::shader_type))
	.add_method("create_program", static_cast<fei::Program*(fei::RenderDevice::*)(const fei::Shader&, const fei::Shader&)>(&fei::RenderDevice::create_program))
	.add_method("program_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::program_type))
	.add_method("create_buffer", static_cast<fei::Buffer*(fei::RenderDevice::*)(fei::BufferType, fei::BufferUsage)>(&fei::RenderDevice::create_buffer))
	.add_method("buffer_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::buffer_type))
	.add_method("create_texture2d", static_cast<fei::Texture2D*(fei::RenderDevice::*)(const fei::TextureDescriptor&)>(&fei::RenderDevice::create_texture2d))
	.add_method("texture2d_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::texture2d_type))
	.add_method("create_draw_list", static_cast<fei::DrawList*(fei::RenderDevice::*)()>(&fei::RenderDevice::create_draw_list))
	.add_method("draw_list_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::draw_list_type))
	.add_method("create_render_pipeline", static_cast<fei::RenderPipeline*(fei::RenderDevice::*)(const fei::RenderPipelineDescriptor&)>(&fei::RenderDevice::create_render_pipeline))
	.add_method("render_pipeline_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::render_pipeline_type))
	.add_method("create_framebuffer", static_cast<fei::Framebuffer*(fei::RenderDevice::*)(const fei::FramebufferDescriptor&)>(&fei::RenderDevice::create_framebuffer))
	.add_method("frame_buffer_type", static_cast<fei::TypeId(fei::RenderDevice::*)()>(&fei::RenderDevice::frame_buffer_type));
registry.register_cls<fei::RenderPassDescriptor>()
	.add_property("framebuffer", &fei::RenderPassDescriptor::framebuffer)
	.add_property("clear_color", &fei::RenderPassDescriptor::clear_color)
	.add_property("clear_color_value", &fei::RenderPassDescriptor::clear_color_value)
	.add_property("clear_depth", &fei::RenderPassDescriptor::clear_depth)
	.add_property("clear_depth_value", &fei::RenderPassDescriptor::clear_depth_value);
registry.register_cls<fei::DrawList>()
	.add_method("begin", static_cast<void(fei::DrawList::*)(const fei::RenderPassDescriptor&)>(&fei::DrawList::begin))
	.add_method("set_viewport", static_cast<void(fei::DrawList::*)(std::int32_t, std::int32_t, std::uint32_t, std::uint32_t)>(&fei::DrawList::set_viewport))
	.add_method("bind_render_pipeline", static_cast<void(fei::DrawList::*)(const fei::RenderPipeline*)>(&fei::DrawList::bind_render_pipeline))
	.add_method("bind_vertex_buffer", static_cast<void(fei::DrawList::*)(const fei::Buffer*)>(&fei::DrawList::bind_vertex_buffer))
	.add_method("bind_texture", static_cast<void(fei::DrawList::*)(const fei::Texture2D*)>(&fei::DrawList::bind_texture))
	.add_method("draw", static_cast<void(fei::DrawList::*)(size_t, size_t)>(&fei::DrawList::draw))
	.add_method("end", static_cast<void(fei::DrawList::*)()>(&fei::DrawList::end));
registry.register_cls<fei::Attachment>()
	.add_property("texture", &fei::Attachment::texture)
	.add_property("mip_level", &fei::Attachment::mip_level)
	.add_property("layer", &fei::Attachment::layer);
registry.register_cls<fei::FramebufferDescriptor>()
	.add_property("color_attachments", &fei::FramebufferDescriptor::color_attachments)
	.add_property("has_depth_attachment", &fei::FramebufferDescriptor::has_depth_attachment)
	.add_property("depth_attachment", &fei::FramebufferDescriptor::depth_attachment);
registry.register_cls<fei::Framebuffer>()
	.add_method("color_attachment", static_cast<fei::Texture2D*(fei::Framebuffer::*)(std::uint32_t) const>(&fei::Framebuffer::color_attachment))
	.add_method("depth_attachment", static_cast<fei::Texture2D*(fei::Framebuffer::*)() const>(&fei::Framebuffer::depth_attachment))
	.add_constructor<fei::Framebuffer, const fei::FramebufferDescriptor&>();
registry.register_cls<fei::BufferOpenGL>()
	.add_method("update_data", static_cast<void(fei::BufferOpenGL::*)(const std::byte*, std::size_t)>(&fei::BufferOpenGL::update_data))
	.add_method("handler", static_cast<GLuint(fei::BufferOpenGL::*)() const>(&fei::BufferOpenGL::handler))
	.add_constructor<fei::BufferOpenGL, fei::BufferType, fei::BufferUsage>();
registry.register_cls<fei::RenderDeviceOpenGL>()
	.add_method("create_shader", static_cast<fei::Shader*(fei::RenderDeviceOpenGL::*)(fei::ShaderStage, const std::basic_string<char>&)>(&fei::RenderDeviceOpenGL::create_shader))
	.add_method("shader_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::shader_type))
	.add_method("create_program", static_cast<fei::Program*(fei::RenderDeviceOpenGL::*)(const fei::Shader&, const fei::Shader&)>(&fei::RenderDeviceOpenGL::create_program))
	.add_method("program_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::program_type))
	.add_method("create_buffer", static_cast<fei::Buffer*(fei::RenderDeviceOpenGL::*)(fei::BufferType, fei::BufferUsage)>(&fei::RenderDeviceOpenGL::create_buffer))
	.add_method("buffer_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::buffer_type))
	.add_method("create_texture2d", static_cast<fei::Texture2D*(fei::RenderDeviceOpenGL::*)(const fei::TextureDescriptor&)>(&fei::RenderDeviceOpenGL::create_texture2d))
	.add_method("texture2d_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::texture2d_type))
	.add_method("create_draw_list", static_cast<fei::DrawList*(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::create_draw_list))
	.add_method("draw_list_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::draw_list_type))
	.add_method("create_render_pipeline", static_cast<fei::RenderPipeline*(fei::RenderDeviceOpenGL::*)(const fei::RenderPipelineDescriptor&)>(&fei::RenderDeviceOpenGL::create_render_pipeline))
	.add_method("render_pipeline_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::render_pipeline_type))
	.add_method("create_framebuffer", static_cast<fei::Framebuffer*(fei::RenderDeviceOpenGL::*)(const fei::FramebufferDescriptor&)>(&fei::RenderDeviceOpenGL::create_framebuffer))
	.add_method("frame_buffer_type", static_cast<fei::TypeId(fei::RenderDeviceOpenGL::*)()>(&fei::RenderDeviceOpenGL::frame_buffer_type))
	.add_constructor<fei::RenderDeviceOpenGL>();
registry.register_cls<fei::DrawListOpenGL>()
	.add_method("begin", static_cast<void(fei::DrawListOpenGL::*)(const fei::RenderPassDescriptor&)>(&fei::DrawListOpenGL::begin))
	.add_method("set_viewport", static_cast<void(fei::DrawListOpenGL::*)(std::int32_t, std::int32_t, std::uint32_t, std::uint32_t)>(&fei::DrawListOpenGL::set_viewport))
	.add_method("bind_render_pipeline", static_cast<void(fei::DrawListOpenGL::*)(const fei::RenderPipeline*)>(&fei::DrawListOpenGL::bind_render_pipeline))
	.add_method("bind_vertex_buffer", static_cast<void(fei::DrawListOpenGL::*)(const fei::Buffer*)>(&fei::DrawListOpenGL::bind_vertex_buffer))
	.add_method("bind_texture", static_cast<void(fei::DrawListOpenGL::*)(const fei::Texture2D*)>(&fei::DrawListOpenGL::bind_texture))
	.add_method("draw", static_cast<void(fei::DrawListOpenGL::*)(size_t, size_t)>(&fei::DrawListOpenGL::draw))
	.add_method("end", static_cast<void(fei::DrawListOpenGL::*)()>(&fei::DrawListOpenGL::end));
registry.register_cls<fei::FramebufferOpenGL>()
	.add_method("handler", static_cast<GLuint(fei::FramebufferOpenGL::*)() const>(&fei::FramebufferOpenGL::handler))
	.add_constructor<fei::FramebufferOpenGL, const fei::FramebufferDescriptor&>();
registry.register_cls<fei::OpenGLPlugin>()
	.add_method("setup", static_cast<void(fei::OpenGLPlugin::*)(fei::App&)>(&fei::OpenGLPlugin::setup));
registry.register_cls<fei::ProgramOpenGL>()
	.add_method("handler", static_cast<GLuint(fei::ProgramOpenGL::*)() const>(&fei::ProgramOpenGL::handler))
	.add_constructor<fei::ProgramOpenGL, const fei::Shader&, const fei::Shader&>();
registry.register_cls<fei::RenderPipelineOpenGL>()
	.add_constructor<fei::RenderPipelineOpenGL, const fei::RenderPipelineDescriptor&>();
registry.register_cls<fei::ShaderOpenGL>()
	.add_method("handler", static_cast<GLuint(fei::ShaderOpenGL::*)() const>(&fei::ShaderOpenGL::handler))
	.add_method("compile", static_cast<bool(fei::ShaderOpenGL::*)(fei::ShaderStage, const char**, size_t)>(&fei::ShaderOpenGL::compile))
	.add_constructor<fei::ShaderOpenGL, fei::ShaderStage, const std::basic_string<char>&>();
registry.register_cls<fei::Texture2DOpenGL>()
	.add_method("update_data", static_cast<void(fei::Texture2DOpenGL::*)(const std::byte*, std::uint32_t, std::uint32_t)>(&fei::Texture2DOpenGL::update_data))
	.add_method("apply", static_cast<void(fei::Texture2DOpenGL::*)(std::uint32_t) const>(&fei::Texture2DOpenGL::apply))
	.add_method("handler", static_cast<GLuint(fei::Texture2DOpenGL::*)() const>(&fei::Texture2DOpenGL::handler))
	.add_method("width", static_cast<int(fei::Texture2DOpenGL::*)() const>(&fei::Texture2DOpenGL::width))
	.add_method("height", static_cast<int(fei::Texture2DOpenGL::*)() const>(&fei::Texture2DOpenGL::height))
	.add_constructor<fei::Texture2DOpenGL, const fei::TextureDescriptor&>()
	.add_constructor<fei::Texture2DOpenGL, fei::Texture2DOpenGL&&>();
registry.register_cls<fei::Texture2DLoader>()
	.add_method("load_asset", static_cast<fei::Texture2D*(fei::Texture2DLoader::*)(const std::filesystem::path&)>(&fei::Texture2DLoader::load_asset));
registry.register_cls<fei::ProgramLoader>()
	.add_method("load_asset", static_cast<fei::Program*(fei::ProgramLoader::*)(const std::filesystem::path&)>(&fei::ProgramLoader::load_asset));
registry.register_cls<fei::GraphicsPlugin>()
	.add_method("setup", static_cast<void(fei::GraphicsPlugin::*)(fei::App&)>(&fei::GraphicsPlugin::setup));
registry.register_cls<fei::Program>();
registry.register_cls<fei::VertexAttribute>()
	.add_property("location", &fei::VertexAttribute::location)
	.add_property("offset", &fei::VertexAttribute::offset)
	.add_property("format", &fei::VertexAttribute::format)
	.add_property("normalized", &fei::VertexAttribute::normalized);
registry.register_cls<fei::VertexLayout>()
	.add_property("attributes", &fei::VertexLayout::attributes)
	.add_property("stride", &fei::VertexLayout::stride);
registry.register_cls<fei::RenderPipelineRasterizationState>()
	.add_property("wireframe", &fei::RenderPipelineRasterizationState::wireframe)
	.add_property("cull_mode", &fei::RenderPipelineRasterizationState::cull_mode)
	.add_property("front_face", &fei::RenderPipelineRasterizationState::front_face)
	.add_property("line_width", &fei::RenderPipelineRasterizationState::line_width);
registry.register_cls<fei::RenderPipelineDescriptor>()
	.add_property("program", &fei::RenderPipelineDescriptor::program)
	.add_property("uniforms", &fei::RenderPipelineDescriptor::uniforms)
	.add_property("vertex_layout", &fei::RenderPipelineDescriptor::vertex_layout)
	.add_property("render_primitive", &fei::RenderPipelineDescriptor::render_primitive)
	.add_property("rasterization_state", &fei::RenderPipelineDescriptor::rasterization_state);
registry.register_cls<fei::RenderPipeline>()
	.add_method("program", static_cast<fei::Program*(fei::RenderPipeline::*)() const>(&fei::RenderPipeline::program))
	.add_method("set_program", static_cast<void(fei::RenderPipeline::*)(fei::Program*)>(&fei::RenderPipeline::set_program))
	.add_method("vertex_layout", static_cast<const fei::VertexLayout&(fei::RenderPipeline::*)() const>(&fei::RenderPipeline::vertex_layout))
	.add_method("render_primitive", static_cast<fei::RenderPrimitive(fei::RenderPipeline::*)() const>(&fei::RenderPipeline::render_primitive))
	.add_method("uniforms", static_cast<const std::unordered_map<std::basic_string<char>, std::variant<float, int, bool, fei::Vector2, fei::Vector3, fei::Vector4, fei::Matrix4x4>>&(fei::RenderPipeline::*)() const>(&fei::RenderPipeline::uniforms))
	.add_method("set_uniform", static_cast<void(fei::RenderPipeline::*)(const std::basic_string<char>&, const std::variant<float, int, bool, fei::Vector2, fei::Vector3, fei::Vector4, fei::Matrix4x4>&)>(&fei::RenderPipeline::set_uniform))
	.add_constructor<fei::RenderPipeline, const fei::RenderPipelineDescriptor&>();
registry.register_cls<fei::Shader>();
registry.register_cls<fei::SamplerDescriptor>()
	.add_property("mag_filter", &fei::SamplerDescriptor::mag_filter)
	.add_property("min_filter", &fei::SamplerDescriptor::min_filter)
	.add_property("s_address_mode", &fei::SamplerDescriptor::s_address_mode)
	.add_property("t_address_mode", &fei::SamplerDescriptor::t_address_mode);
registry.register_cls<fei::TextureDescriptor>()
	.add_property("texture_type", &fei::TextureDescriptor::texture_type)
	.add_property("texture_format", &fei::TextureDescriptor::texture_format)
	.add_property("texture_usage", &fei::TextureDescriptor::texture_usage)
	.add_property("width", &fei::TextureDescriptor::width)
	.add_property("height", &fei::TextureDescriptor::height)
	.add_property("depth", &fei::TextureDescriptor::depth)
	.add_property("sampler_descriptor", &fei::TextureDescriptor::sampler_descriptor)
	.add_property("data", &fei::TextureDescriptor::data);
registry.register_cls<fei::Texture2D>()
	.add_method("update_data", static_cast<void(fei::Texture2D::*)(const std::byte*, std::uint32_t, std::uint32_t)>(&fei::Texture2D::update_data))
	.add_method("apply", static_cast<void(fei::Texture2D::*)(std::uint32_t) const>(&fei::Texture2D::apply))
	.add_method("width", static_cast<int(fei::Texture2D::*)() const>(&fei::Texture2D::width))
	.add_method("height", static_cast<int(fei::Texture2D::*)() const>(&fei::Texture2D::height));
registry.register_cls<fei::Color3B>()
	.add_property("r", &fei::Color3B::r)
	.add_property("g", &fei::Color3B::g)
	.add_property("b", &fei::Color3B::b)
	.add_constructor<fei::Color3B>()
	.add_constructor<fei::Color3B, std::uint8_t, std::uint8_t, std::uint8_t>();
registry.register_cls<fei::Color4B>()
	.add_property("r", &fei::Color4B::r)
	.add_property("g", &fei::Color4B::g)
	.add_property("b", &fei::Color4B::b)
	.add_property("a", &fei::Color4B::a)
	.add_constructor<fei::Color4B>()
	.add_constructor<fei::Color4B, std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t>();
registry.register_cls<fei::Color4F>()
	.add_property("r", &fei::Color4F::r)
	.add_property("g", &fei::Color4F::g)
	.add_property("b", &fei::Color4F::b)
	.add_property("a", &fei::Color4F::a)
	.add_method("values", static_cast<std::tuple<float, float, float, float>(fei::Color4F::*)() const>(&fei::Color4F::values))
	.add_constructor<fei::Color4F>()
	.add_constructor<fei::Color4F, float, float, float, float>()
	.add_constructor<fei::Color4F, const fei::Color4B&>();
registry.register_cls<fei::Matrix3x3>()
	.add_property("mat", &fei::Matrix3x3::mat)
	.add_method("data", static_cast<const float*(fei::Matrix3x3::*)() const>(&fei::Matrix3x3::data))
	.add_method("get_column", static_cast<fei::Vector3(fei::Matrix3x3::*)(size_t) const>(&fei::Matrix3x3::get_column))
	.add_method("set_column", static_cast<void(fei::Matrix3x3::*)(size_t, const fei::Vector3&)>(&fei::Matrix3x3::set_column))
	.add_method("transposed", static_cast<fei::Matrix3x3(fei::Matrix3x3::*)() const>(&fei::Matrix3x3::transposed))
	.add_method("determinant", static_cast<float(fei::Matrix3x3::*)() const>(&fei::Matrix3x3::determinant))
	.add_method("inversed", static_cast<fei::Matrix3x3(fei::Matrix3x3::*)(float) const>(&fei::Matrix3x3::inversed))
	.add_constructor<fei::Matrix3x3>()
	.add_constructor<fei::Matrix3x3, float[3][3]>()
	.add_constructor<fei::Matrix3x3, float(&)[9]>()
	.add_constructor<fei::Matrix3x3, float, float, float, float, float, float, float, float, float>()
	.add_constructor<fei::Matrix3x3, const fei::Vector3&, const fei::Vector3&, const fei::Vector3&>();
registry.register_cls<fei::Matrix4x4>()
	.add_property("mat", &fei::Matrix4x4::mat)
	.add_method("data", static_cast<const float*(fei::Matrix4x4::*)() const>(&fei::Matrix4x4::data))
	.add_method("concatenate", static_cast<fei::Matrix4x4(fei::Matrix4x4::*)(const fei::Matrix4x4&) const>(&fei::Matrix4x4::concatenate))
	.add_method("transposed", static_cast<fei::Matrix4x4(fei::Matrix4x4::*)() const>(&fei::Matrix4x4::transposed))
	.add_method("minor", static_cast<float(fei::Matrix4x4::*)(size_t, size_t, size_t, size_t, size_t, size_t) const>(&fei::Matrix4x4::minor))
	.add_method("determinant", static_cast<float(fei::Matrix4x4::*)() const>(&fei::Matrix4x4::determinant))
	.add_method("is_affine", static_cast<bool(fei::Matrix4x4::*)() const>(&fei::Matrix4x4::is_affine))
	.add_method("inverse_affine", static_cast<fei::Matrix4x4(fei::Matrix4x4::*)() const>(&fei::Matrix4x4::inverse_affine))
	.add_constructor<fei::Matrix4x4>()
	.add_constructor<fei::Matrix4x4, const float(&)[16]>()
	.add_constructor<fei::Matrix4x4, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float>()
	.add_constructor<fei::Matrix4x4, const fei::Vector4&, const fei::Vector4&, const fei::Vector4&, const fei::Vector4&>();
registry.register_cls<fei::Rect>()
	.add_property("min", &fei::Rect::min)
	.add_property("max", &fei::Rect::max);
registry.register_cls<fei::Vector2>()
	.add_property("x", &fei::Vector2::x)
	.add_property("y", &fei::Vector2::y)
	.add_method("data", static_cast<float*(fei::Vector2::*)()>(&fei::Vector2::data))
	.add_method("data", static_cast<const float*(fei::Vector2::*)() const>(&fei::Vector2::data))
	.add_method("set", static_cast<void(fei::Vector2::*)(float, float)>(&fei::Vector2::set))
	.add_method("magnitude", static_cast<float(fei::Vector2::*)() const>(&fei::Vector2::magnitude))
	.add_method("sqr_magnitude", static_cast<float(fei::Vector2::*)() const>(&fei::Vector2::sqr_magnitude))
	.add_method("normalized", static_cast<fei::Vector2(fei::Vector2::*)() const>(&fei::Vector2::normalized))
	.add_method("normalize", static_cast<void(fei::Vector2::*)()>(&fei::Vector2::normalize))
	.add_method("distance", static_cast<float(*)(const fei::Vector2&, const fei::Vector2&)>(&fei::Vector2::distance))
	.add_method("sqr_distance", static_cast<float(*)(const fei::Vector2&, const fei::Vector2&)>(&fei::Vector2::sqr_distance))
	.add_method("dot", static_cast<float(*)(const fei::Vector2&, const fei::Vector2&)>(&fei::Vector2::dot))
	.add_method("lerp", static_cast<fei::Vector2(*)(const fei::Vector2&, const fei::Vector2&, float)>(&fei::Vector2::lerp))
	.add_method("perpendicular", static_cast<fei::Vector2(*)(const fei::Vector2&)>(&fei::Vector2::perpendicular))
	.add_method("reflect", static_cast<fei::Vector2(*)(const fei::Vector2&, const fei::Vector2&)>(&fei::Vector2::reflect))
	.add_method("rotate", static_cast<fei::Vector2(*)(const fei::Vector2&, float)>(&fei::Vector2::rotate))
	.add_constructor<fei::Vector2>()
	.add_constructor<fei::Vector2, float, float>()
	.add_constructor<fei::Vector2, float>()
	.add_constructor<fei::Vector2, const fei::Vector2&>();
registry.register_cls<fei::Vector3>()
	.add_property("x", &fei::Vector3::x)
	.add_property("y", &fei::Vector3::y)
	.add_property("z", &fei::Vector3::z)
	.add_method("data", static_cast<float*(fei::Vector3::*)()>(&fei::Vector3::data))
	.add_method("data", static_cast<const float*(fei::Vector3::*)() const>(&fei::Vector3::data))
	.add_method("set", static_cast<void(fei::Vector3::*)(float, float, float)>(&fei::Vector3::set))
	.add_method("magnitude", static_cast<float(fei::Vector3::*)() const>(&fei::Vector3::magnitude))
	.add_method("sqr_magnitude", static_cast<float(fei::Vector3::*)() const>(&fei::Vector3::sqr_magnitude))
	.add_method("normalized", static_cast<fei::Vector3(fei::Vector3::*)() const>(&fei::Vector3::normalized))
	.add_method("normalize", static_cast<void(fei::Vector3::*)()>(&fei::Vector3::normalize))
	.add_method("distance", static_cast<float(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::distance))
	.add_method("sqr_distance", static_cast<float(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::sqr_distance))
	.add_method("dot", static_cast<float(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::dot))
	.add_method("cross", static_cast<fei::Vector3(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::cross))
	.add_method("angle", static_cast<float(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::angle))
	.add_method("lerp", static_cast<fei::Vector3(*)(const fei::Vector3&, const fei::Vector3&, float)>(&fei::Vector3::lerp))
	.add_method("reflect", static_cast<fei::Vector3(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::reflect))
	.add_method("clamp", static_cast<fei::Vector3(*)(const fei::Vector3&, const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::clamp))
	.add_method("project", static_cast<fei::Vector3(*)(const fei::Vector3&, const fei::Vector3&)>(&fei::Vector3::project))
	.add_constructor<fei::Vector3>()
	.add_constructor<fei::Vector3, float, float, float>()
	.add_constructor<fei::Vector3, float>();
registry.register_cls<fei::Vector4>()
	.add_property("x", &fei::Vector4::x)
	.add_property("y", &fei::Vector4::y)
	.add_property("z", &fei::Vector4::z)
	.add_property("w", &fei::Vector4::w)
	.add_method("data", static_cast<float*(fei::Vector4::*)()>(&fei::Vector4::data))
	.add_method("data", static_cast<const float*(fei::Vector4::*)() const>(&fei::Vector4::data))
	.add_method("set", static_cast<void(fei::Vector4::*)(float, float, float, float)>(&fei::Vector4::set))
	.add_method("dot", static_cast<float(*)(const fei::Vector4&, const fei::Vector4&)>(&fei::Vector4::dot))
	.add_constructor<fei::Vector4>()
	.add_constructor<fei::Vector4, float, float, float, float>()
	.add_constructor<fei::Vector4, const fei::Vector3&, float>()
	.add_constructor<fei::Vector4, float[4]>();
registry.register_cls<fei::Param>()
	.add_method("type_id", static_cast<fei::TypeId(fei::Param::*)() const>(&fei::Param::type_id))
	.add_method("name", static_cast<const std::basic_string<char>&(fei::Param::*)() const>(&fei::Param::name))
	.add_method("set_name", static_cast<void(fei::Param::*)(const std::basic_string<char>&)>(&fei::Param::set_name))
	.add_constructor<fei::Param>()
	.add_constructor<fei::Param, std::basic_string<char>, fei::TypeId>();
registry.register_cls<fei::ReturnValue>()
	.add_property("m_kind", &fei::ReturnValue::m_kind)
	.add_method("kind", static_cast<fei::ReturnValue::Kind(fei::ReturnValue::*)() const>(&fei::ReturnValue::kind))
	.add_method("value", static_cast<fei::Val&(fei::ReturnValue::*)()>(&fei::ReturnValue::value))
	.add_method("ref", static_cast<fei::Ref(fei::ReturnValue::*)() const>(&fei::ReturnValue::ref))
	.add_method("is_value", static_cast<bool(fei::ReturnValue::*)() const>(&fei::ReturnValue::is_value))
	.add_method("is_ref", static_cast<bool(fei::ReturnValue::*)() const>(&fei::ReturnValue::is_ref))
	.add_method("is_void", static_cast<bool(fei::ReturnValue::*)() const>(&fei::ReturnValue::is_void))
	.add_constructor<fei::ReturnValue>()
	.add_constructor<fei::ReturnValue, fei::Val>()
	.add_constructor<fei::ReturnValue, fei::Ref>();
registry.register_cls<fei::Callable>()
	.add_method("validate", static_cast<bool(fei::Callable::*)(const std::vector<fei::Ref>&) const>(&fei::Callable::validate))
	.add_method("invoke_variadic", static_cast<fei::ReturnValue(fei::Callable::*)(const std::vector<fei::Ref>&) const>(&fei::Callable::invoke_variadic))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref) const>(&fei::Callable::invoke))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref, fei::Ref) const>(&fei::Callable::invoke))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref, fei::Ref, fei::Ref) const>(&fei::Callable::invoke))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref, fei::Ref, fei::Ref, fei::Ref) const>(&fei::Callable::invoke))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref, fei::Ref, fei::Ref, fei::Ref, fei::Ref) const>(&fei::Callable::invoke))
	.add_method("invoke", static_cast<fei::ReturnValue(fei::Callable::*)(fei::Ref, fei::Ref, fei::Ref, fei::Ref, fei::Ref, fei::Ref) const>(&fei::Callable::invoke))
	.add_method("name", static_cast<const std::basic_string<char>&(fei::Callable::*)() const>(&fei::Callable::name))
	.add_method("params", static_cast<const std::vector<fei::Param>&(fei::Callable::*)() const>(&fei::Callable::params))
	.add_method("return_type", static_cast<fei::QualType(fei::Callable::*)() const>(&fei::Callable::return_type));
registry.register_cls<fei::Cls>()
	.add_method("get_property", static_cast<fei::Property*(fei::Cls::*)(const std::basic_string<char>&)>(&fei::Cls::get_property))
	.add_method("get_method", static_cast<fei::Method*(fei::Cls::*)(const std::basic_string<char>&, std::vector<TypeId>)>(&fei::Cls::get_method))
	.add_method("has_method", static_cast<bool(fei::Cls::*)(const std::basic_string<char>&) const>(&fei::Cls::has_method))
	.add_method("get_methods", static_cast<std::vector<Method *>(fei::Cls::*)() const>(&fei::Cls::get_methods))
	.add_method("get_constructor", static_cast<fei::Constructor*(fei::Cls::*)(const std::vector<fei::TypeId>&)>(&fei::Cls::get_constructor))
	.add_method("set_to_string", static_cast<fei::Cls&(fei::Cls::*)(std::basic_string<char>(*)(fei::Ref))>(&fei::Cls::set_to_string))
	.add_method("to_string", static_cast<std::basic_string<char>(fei::Cls::*)(fei::Ref) const>(&fei::Cls::to_string))
	.add_method("get_properties", static_cast<std::vector<Property *>(fei::Cls::*)() const>(&fei::Cls::get_properties))
	.add_method("type_id", static_cast<fei::TypeId(fei::Cls::*)() const>(&fei::Cls::type_id))
	.add_constructor<fei::Cls, fei::TypeId>()
	.add_constructor<fei::Cls, fei::Cls&&>();
registry.register_cls<fei::Constructor>()
	.add_method("invoke_variadic", static_cast<fei::ReturnValue(fei::Constructor::*)(const std::vector<fei::Ref>&) const>(&fei::Constructor::invoke_variadic))
	.add_method("arg_types", static_cast<std::vector<TypeId>(fei::Constructor::*)() const>(&fei::Constructor::arg_types));
registry.register_cls<fei::Method>()
	.add_method("invoke_variadic", static_cast<fei::ReturnValue(fei::Method::*)(const std::vector<fei::Ref>&) const>(&fei::Method::invoke_variadic));
registry.register_cls<fei::Property>()
	.add_method("get", static_cast<fei::Ref(fei::Property::*)(fei::Ref) const>(&fei::Property::get))
	.add_method("set", static_cast<void(fei::Property::*)(fei::Ref, fei::Ref) const>(&fei::Property::set))
	.add_method("name", static_cast<const std::basic_string<char>&(fei::Property::*)() const>(&fei::Property::name))
	.add_method("type_id", static_cast<fei::TypeId(fei::Property::*)() const>(&fei::Property::type_id));
registry.register_cls<fei::QualType>()
	.add_method("is_pointer", static_cast<bool(fei::QualType::*)() const>(&fei::QualType::is_pointer))
	.add_method("is_reference", static_cast<bool(fei::QualType::*)() const>(&fei::QualType::is_reference))
	.add_method("is_const", static_cast<bool(fei::QualType::*)() const>(&fei::QualType::is_const))
	.add_method("type_id", static_cast<fei::TypeId(fei::QualType::*)() const>(&fei::QualType::type_id))
	.add_constructor<fei::QualType, fei::TypeId, fei::QualType::Flags>();
registry.register_cls<fei::Ref>()
	.add_method("type_id", static_cast<fei::TypeId(fei::Ref::*)() const>(&fei::Ref::type_id))
	.add_method("ptr", static_cast<void*(fei::Ref::*)() const>(&fei::Ref::ptr))
	.add_constructor<fei::Ref>()
	.add_constructor<fei::Ref, std::nullptr_t>()
	.add_constructor<fei::Ref, void*, fei::TypeId>();
registry.register_cls<fei::TypeId>()
	.add_method("id", static_cast<std::size_t(fei::TypeId::*)() const>(&fei::TypeId::id))
	.add_constructor<fei::TypeId>()
	.add_constructor<fei::TypeId, std::size_t>()
	.add_constructor<fei::TypeId, const std::basic_string<char>&>();
registry.register_cls<fei::Type>()
	.add_method("name", static_cast<const std::basic_string<char>&(fei::Type::*)() const>(&fei::Type::name))
	.add_method("hash", static_cast<fei::TypeId(fei::Type::*)() const>(&fei::Type::hash))
	.add_method("id", static_cast<fei::TypeId(fei::Type::*)() const>(&fei::Type::id))
	.add_method("size", static_cast<std::size_t(fei::Type::*)() const>(&fei::Type::size))
	.add_method("is_number", static_cast<bool(fei::Type::*)() const>(&fei::Type::is_number))
	.add_method("is_integral", static_cast<bool(fei::Type::*)() const>(&fei::Type::is_integral))
	.add_method("is_floating_point", static_cast<bool(fei::Type::*)() const>(&fei::Type::is_floating_point))
	.add_method("stripped_name", static_cast<std::basic_string<char>(fei::Type::*)() const>(&fei::Type::stripped_name))
	.add_constructor<fei::Type, std::basic_string<char>, fei::TypeId, std::size_t>();
registry.register_cls<std::hash<fei::TypeId>>();
registry.register_cls<std::hash<fei::Type>>();
registry.register_cls<fei::detail::ValHandlerBase>()
	.add_method("ref", static_cast<fei::Ref(fei::detail::ValHandlerBase::*)(const fei::Val&) const>(&fei::detail::ValHandlerBase::ref))
	.add_method("create", static_cast<void(fei::detail::ValHandlerBase::*)(fei::Val&, fei::Ref) const>(&fei::detail::ValHandlerBase::create))
	.add_method("destroy", static_cast<void(fei::detail::ValHandlerBase::*)(fei::Val&) const>(&fei::detail::ValHandlerBase::destroy))
	.add_method("copy", static_cast<void(fei::detail::ValHandlerBase::*)(fei::Val&, const fei::Val&) const>(&fei::detail::ValHandlerBase::copy))
	.add_method("move", static_cast<void(fei::detail::ValHandlerBase::*)(fei::Val&, fei::Val&) const>(&fei::detail::ValHandlerBase::move))
	.add_method("is_copyable", static_cast<bool(fei::detail::ValHandlerBase::*)() const>(&fei::detail::ValHandlerBase::is_copyable))
	.add_method("is_movable", static_cast<bool(fei::detail::ValHandlerBase::*)() const>(&fei::detail::ValHandlerBase::is_movable));
registry.register_cls<fei::Val>()
	.add_method("swap", static_cast<fei::Val&(fei::Val::*)(fei::Val&)>(&fei::Val::swap))
	.add_method("ref", static_cast<fei::Ref(fei::Val::*)() const>(&fei::Val::ref))
	.add_method("type_id", static_cast<fei::TypeId(fei::Val::*)() const>(&fei::Val::type_id))
	.add_method("empty", static_cast<bool(fei::Val::*)() const>(&fei::Val::empty))
	.add_constructor<fei::Val>()
	.add_constructor<fei::Val, const fei::Val&>()
	.add_constructor<fei::Val, fei::Val&&>();
registry.register_cls<fei::Val::Storage>()
	.add_property("m_bytes", &fei::Val::Storage::m_bytes)
	.add_method("get_ptr", static_cast<void*(fei::Val::Storage::*)() const>(&fei::Val::Storage::get_ptr))
	.add_method("set_ptr", static_cast<void(fei::Val::Storage::*)(void*)>(&fei::Val::Storage::set_ptr));
registry.register_cls<fei::Camera>()
	.add_property("width", &fei::Camera::width)
	.add_property("height", &fei::Camera::height)
	.add_property("near", &fei::Camera::near)
	.add_property("far", &fei::Camera::far)
	.add_method("projection", static_cast<fei::Matrix4x4(fei::Camera::*)() const>(&fei::Camera::projection));
registry.register_cls<fei::Debug>()
	.add_property("data", &fei::Debug::data)
	.add_property("program", &fei::Debug::program)
	.add_property("buffer", &fei::Debug::buffer)
	.add_method("line", static_cast<void(fei::Debug::*)(fei::Vector2, fei::Vector2, fei::Color4F)>(&fei::Debug::line))
	.add_method("rect", static_cast<void(fei::Debug::*)(fei::Rect, fei::Color4F)>(&fei::Debug::rect))
	.add_method("circle", static_cast<void(fei::Debug::*)(fei::Vector2, float, int, fei::Color4F)>(&fei::Debug::circle))
	.add_method("clear", static_cast<void(fei::Debug::*)()>(&fei::Debug::clear));
registry.register_cls<fei::DebugPlugin>()
	.add_method("setup", static_cast<void(fei::DebugPlugin::*)(fei::App&)>(&fei::DebugPlugin::setup));
registry.register_cls<fei::Material2D>()
	.add_method("program", static_cast<fei::Program*(fei::Material2D::*)() const>(&fei::Material2D::program))
	.add_method("texture", static_cast<fei::Texture2D*(fei::Material2D::*)() const>(&fei::Material2D::texture))
	.add_constructor<fei::Material2D, fei::Program*, fei::Texture2D*>();
registry.register_cls<fei::RenderResource>()
	.add_property("framebuffer", &fei::RenderResource::framebuffer)
	.add_property("color_tex", &fei::RenderResource::color_tex)
	.add_property("depth_tex", &fei::RenderResource::depth_tex)
	.add_property("draw_list", &fei::RenderResource::draw_list)
	.add_property("device", &fei::RenderResource::device)
	.add_property("clear_color_value", &fei::RenderResource::clear_color_value);
registry.register_cls<fei::RenderPlugin>()
	.add_method("setup", static_cast<void(fei::RenderPlugin::*)(fei::App&)>(&fei::RenderPlugin::setup));
registry.register_cls<fei::Sprite>()
	.add_property("color", &fei::Sprite::color)
	.add_property("anchor", &fei::Sprite::anchor)
	.add_property("texture", &fei::Sprite::texture);
registry.register_cls<fei::SpriteRendererResource>()
	.add_property("vertex_buffer", &fei::SpriteRendererResource::vertex_buffer)
	.add_property("program", &fei::SpriteRendererResource::program)
	.add_property("pipeline", &fei::SpriteRendererResource::pipeline);
registry.register_cls<fei::SpritePlugin>()
	.add_method("setup", static_cast<void(fei::SpritePlugin::*)(fei::App&)>(&fei::SpritePlugin::setup));
registry.register_cls<fei::ScriptingEngine>()
	.add_method("register_type", static_cast<void(fei::ScriptingEngine::*)(fei::Type&)>(&fei::ScriptingEngine::register_type))
	.add_method("run_script", static_cast<void(fei::ScriptingEngine::*)(const std::basic_string<char>&)>(&fei::ScriptingEngine::run_script))
	.add_constructor<fei::ScriptingEngine>();
registry.register_cls<fei::KeyEvent>()
	.add_property("key_code", &fei::KeyEvent::key_code)
	.add_property("state", &fei::KeyEvent::state);
registry.register_cls<fei::KeyInput>()
	.add_method("pressed", static_cast<bool(fei::KeyInput::*)(fei::KeyCode) const>(&fei::KeyInput::pressed))
	.add_method("just_pressed", static_cast<bool(fei::KeyInput::*)(fei::KeyCode) const>(&fei::KeyInput::just_pressed))
	.add_method("just_released", static_cast<bool(fei::KeyInput::*)(fei::KeyCode) const>(&fei::KeyInput::just_released))
	.add_method("press", static_cast<void(fei::KeyInput::*)(fei::KeyCode)>(&fei::KeyInput::press))
	.add_method("release", static_cast<void(fei::KeyInput::*)(fei::KeyCode)>(&fei::KeyInput::release))
	.add_method("clear", static_cast<void(fei::KeyInput::*)()>(&fei::KeyInput::clear));
registry.register_cls<fei::MouseInput>()
	.add_method("set_position", static_cast<void(fei::MouseInput::*)(fei::Vector2)>(&fei::MouseInput::set_position))
	.add_method("position", static_cast<fei::Vector2(fei::MouseInput::*)() const>(&fei::MouseInput::position))
	.add_method("press", static_cast<void(fei::MouseInput::*)(fei::MouseButton)>(&fei::MouseInput::press))
	.add_method("release", static_cast<void(fei::MouseInput::*)(fei::MouseButton)>(&fei::MouseInput::release))
	.add_method("pressed", static_cast<bool(fei::MouseInput::*)(fei::MouseButton) const>(&fei::MouseInput::pressed))
	.add_method("just_pressed", static_cast<bool(fei::MouseInput::*)(fei::MouseButton) const>(&fei::MouseInput::just_pressed))
	.add_method("just_released", static_cast<bool(fei::MouseInput::*)(fei::MouseButton) const>(&fei::MouseInput::just_released))
	.add_method("clear", static_cast<void(fei::MouseInput::*)()>(&fei::MouseInput::clear));
registry.register_cls<fei::InputPlugin>()
	.add_method("setup", static_cast<void(fei::InputPlugin::*)(fei::App&)>(&fei::InputPlugin::setup));
registry.register_cls<fei::Window>()
	.add_property("width", &fei::Window::width)
	.add_property("height", &fei::Window::height);
registry.register_cls<fei::WindowPlugin>()
	.add_method("setup", static_cast<void(fei::WindowPlugin::*)(fei::App&)>(&fei::WindowPlugin::setup));
}
}
