// This file is generated by reflgen.py

#include "reflgen.hpp"
#include "refl/registry.hpp"
#include "refl/cls.hpp"

{% for source_file in classes | map(attribute='source_file') | unique | sort %}
#include "{{ Path(source_file).relative_to(rootdir.resolve()).as_posix() }}"
{% endfor %}

namespace fei {
void register_classes() {

auto& registry = Registry::instance();
{% for cls in classes | sort(attribute='name') if cls.name != "fei::Registry" %}
registry.register_cls<{{ cls.name }}>()
    {% for prop in cls.properties if prop.access == "public" %}
    .add_property("{{ prop.name }}", &{{ cls.name }}::{{ prop.name }})
    {% endfor %}
    {% for method in cls.methods if method.access == "public" and not method.name.startswith("operator") %}
    .add_method("{{ method.name }}", static_cast<{{ method.to_cpp_type(cls.name) }}>(&{{ cls.name }}::{{ method.name }}))
    {% endfor %}
    {% if not cls.is_abstract() %}
        {% for ctor in cls.constructors if ctor.access == "public" %}
            {% if ctor.parameters %}
    .add_constructor<{{ cls.name }}, {{ ctor.parameters | join(', ', attribute='type_name') }}>()
            {% else %}
    .add_constructor<{{ cls.name }}>()
            {% endif %}
        {% endfor %}
    {% endif %}
    ;
{% endfor %}

}
}
